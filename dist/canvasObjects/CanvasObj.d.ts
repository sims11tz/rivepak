import Matter from "matter-js";
import { PIXI_LAYER } from "../controllers/PixiController";
import type { TextStyleOptions } from "pixi.js";
export declare class GlobalUIDGenerator {
    private static currentId;
    static generateUID(): string;
    private static uniqueIds;
    static generateUniqueString(baseString: string): string;
    static clear(): void;
}
export interface CanvasObjectEntity {
    width?: number;
    height?: number;
    xScale?: number;
    yScale?: number;
    xSpeed?: number;
    x?: number;
    y?: number;
    z?: number;
    resolutionScale?: number;
    riveInteractiveLocalOnly?: boolean;
}
export interface CanvasObjectDef {
    uuid?: string;
    label?: string;
    text?: string;
    textStyle?: Partial<TextStyleOptions>;
    textAlign?: 'left' | 'center' | 'right' | 'justify';
    verticalAlign?: 'top' | 'middle' | 'bottom';
    debugMode?: boolean;
    drawFunction?: (pixiGraphics: any, defObj: CanvasObjectDef) => void;
    wordWrap?: boolean;
    wordWrapWidth?: number;
    breakWords?: boolean;
    maxWidth?: number;
    maxHeight?: number;
    textShadow?: boolean;
    textShadowColor?: string | number;
    textShadowBlur?: number;
    textShadowAngle?: number;
    textShadowDistance?: number;
    textShadowAlpha?: number;
    typewriterEffect?: boolean;
    typewriterSpeed?: number;
    fadeInDuration?: number;
    pulseText?: boolean;
    pulseSpeed?: number;
    letterSpacing?: number;
    lineHeight?: number;
    padding?: number;
    trimText?: boolean;
    resolution?: number;
    count?: number;
    width?: number;
    height?: number;
    constrainProportions?: boolean;
    xScale?: number;
    yScale?: number;
    x?: number;
    y?: number;
    z?: number;
    centerLocally?: boolean;
    centerGlobally?: boolean;
    baseX?: number;
    baseY?: number;
    baseXScale?: number;
    baseYScale?: number;
    group?: string;
    randomSpeed?: boolean;
    xSpeed?: number;
    ySpeed?: number;
    pixiLayer?: PIXI_LAYER;
    interactive?: boolean;
    riveInteractive?: boolean;
    riveInteractiveLocalOnly?: boolean;
}
export declare abstract class CanvasObj {
    _uuid: string;
    get uuid(): string;
    _id: string;
    get id(): string;
    _label: string;
    get label(): string;
    _defObj: CanvasObjectDef | null;
    get defObj(): CanvasObjectDef;
    enabled: boolean;
    _state: {
        x: number;
        y: number;
        z: number;
        xScale: number;
        yScale: number;
    };
    centerLocally: boolean;
    centerGlobally: boolean;
    group: string;
    width: number;
    height: number;
    _parent: CanvasObj | null;
    SetParent(parent: CanvasObj | null): void;
    get parent(): CanvasObj | null;
    constrainProportions: boolean;
    baseX: number;
    baseY: number;
    baseWidth: number;
    baseHeight: number;
    baseXScale: number;
    baseYScale: number;
    get resolutionScale(): number;
    _resolutionScale: number;
    get transformedWidth(): number;
    _transformedWidth: number;
    _transformedWidthlast: number;
    get transformedHeight(): number;
    _transformedHeight: number;
    _transformedHeightlast: number;
    get transformedX(): number;
    _transformedX: number;
    _transformedXlast: number;
    get transformedY(): number;
    _transformedY: number;
    _transformedYlast: number;
    _objBoundsReuse: {
        minX: number;
        minY: number;
        maxX: number;
        maxY: number;
    };
    _body: Matter.Body | null;
    _debug: boolean;
    _propertyChangeListeners: Map<"x" | "y" | "z" | "xScale" | "yScale", (oldValue: number, newValue: number) => void>;
    constructor(defObj: CanvasObjectDef);
    UpdateBaseProps(): void;
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
    get xScale(): number;
    set xScale(value: number);
    get yScale(): number;
    set yScale(value: number);
    InitVisuals(): void;
    ApplyResolutionScale(scale: number, property?: string): void;
    abstract Update(time: number, frameCount: number, onceSecond: boolean): void;
    SwapDepths(other: CanvasObj): void;
    BindPropertyChange(property: "x" | "y" | "z" | "xScale" | "yScale", callback: (oldValue: number, newValue: number) => void): void;
    UnbindPropertyChange(property: "x" | "y" | "z" | "xScale" | "yScale"): void;
    set OnZIndexChanged(func: ((canvasObj: CanvasObj, oldZIndex: number, newZIndex: number) => void) | null);
    _OnZIndexChanged: ((canvasObj: CanvasObj, oldZIndex: number, newZIndex: number) => void) | null;
    Dispose(): void;
}
